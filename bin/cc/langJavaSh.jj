/**
 * Versão transformada da gramática para LL(1) sem ambiguidade e com
 * expressão unificada para operações aritméticas.
 */
options {
    static = true;
}

PARSER_BEGIN(langJavaSh)
package cc;
public class langJavaSh {
    public static void main(String args[]) throws ParseException, Exception {
        if (args.length == 0) {
            System.out.println("Uso: java langJavaSh <arquivo>");
            System.exit(1);
        }
        java.io.FileInputStream fileInputStream = new java.io.FileInputStream(args[0]);
        langJavaSh parser = new langJavaSh(fileInputStream);
        while (fileInputStream.available() > 0) {
            System.out.println("Lendo o arquivo de entrada");
            try {
                parser.ClassStruct();
                System.out.println("Compilado com sucesso");
                break;
            } catch (ParseException e) {
                System.out.println("NOK.");
                System.out.println(e.getMessage());
                parser.ReInit(fileInputStream);
            } catch (Error e) {
                System.out.println("Oops.");
                System.out.println(e.getMessage());
                break;
            }
        }
    }
}
PARSER_END(langJavaSh)

SKIP : { " " | "\r" | "\t" | "\n" }

TOKEN : {
    < PLUS : "+" >
|   < INCREMENT : "++" >
|   < DECREMENT : "--" >
|   < MINUS : "-" >
|   < MULTIPLY : "*" >
|   < DIVIDE : "/" >
|   < MATH : ( <PLUS> | <MINUS> | <MULTIPLY> | <DIVIDE> ) >
|   < LogicalDigital : ( <And> | <Or> ) >
|   < And : "&&" | "and" >
|   < Or : "||" | "or" >
|   < LogicalMathOperator : "==" | ">" | ">=" | "<" | "<=" | "!=" >
|   < Atribute : "=" >
}

TOKEN : {
    < CONSTANT : ( <DIGIT> )+ >
|   < LOGICALCONSTANT : "true" | "false" >
|   < DIGIT : ["0"-"9"] >
|   < AccessMod : "public" | "private" | "protected" >
|   < Extends : "extends" >
|   < Implements : "implements" >
|   < Return : "return" >
}

TOKEN : {
    < While : "while" >
|   < If : "if" >
|   < Else : "else" >
|   < For : "for" >
|   < Do : "do" >
|   < Int : "int" >
|   < Float : "float" >
|   < String : "string" >
|   < Bool : "bool" >
|   < Class : "class" >
}

TOKEN : {
    < Ident : ( <CHAR> )+ >
|   < CHAR : ["a"-"z", "A"-"Z"] >
}

/* Token para literal de string */
TOKEN : {
    < StringLiteralToken : "\"" (~["\"", "\n", "\r"])* "\"" >
}

//
// Expressões aritméticas e lógicas unificadas
//
void sum() : {} 
{
    term() ( ( <PLUS> | <MINUS> ) term() )*
}

void term() : {} 
{
    unary() ( ( <MULTIPLY> | <DIVIDE> ) unary() )*
}

void unary() : {} 
{
    // Permite operador unário '+' ou '-' antes do operando
    ( <PLUS> | <MINUS> )? element()
}

void element() : {} 
{
    <CONSTANT>
|   <Ident>
|   "(" sum() ")"
}

void LogicalSta() : {} 
{
    BooleanExp()
}

void BooleanExp() : {} 
{
    BooleanPrimary() BooleanExpTail()
}

void BooleanExpTail() : {} 
{
    ( <LogicalDigital> BooleanExp() )?
}

void BooleanPrimary() : {} 
{
    <LOGICALCONSTANT>
|   <CONSTANT> ( <MATH> sum() )?
|   <Ident> ( <LogicalMathOperator> sum() )?
}

//
// Atribuição e expressões incrementais
//
void VarAssignOrInc() : {} 
{
    <Ident> VarAssignOrIncTail()
}

void VarAssignOrIncTail() : {} 
{
    LOOKAHEAD(1)
    "=" ( sum() | LogicalSta() )
|   ( <DECREMENT> | <INCREMENT> )
}

void IncrementalExpression() : {} 
{
    VarAssignOrInc()
|   ( <DECREMENT> | <INCREMENT> ) <Ident>
}

//
// Declarações de membros da classe
//
// Unifica o tipo e o identificador e usa LOOKAHEAD para decidir se
// trata-se de um método (se vier "(") ou de um campo.
void MemberDeclaration() : {} 
{
    ( <Int> | <Bool> | <String> | <Float> )
    <Ident>
    (
        LOOKAHEAD("(")
            MethodDeclarationRest()
      |
            FieldDeclarationRest()
    )
}

/* Declaração de campo */
void FieldDeclarationRest() : {} 
{
    ( "=" ( sum() | LogicalSta() | <StringLiteralToken> ) )? ";"
}

/* Declaração de método */
void MethodDeclarationRest() : {} 
{
    "(" ParameterList() ")" 
    "{"
        ( Statement() )*
        ReturnStatement()
    "}"
}

/* Lista de parâmetros */
void ParameterList() : {} 
{
    ( ( <Int> | <Bool> | <String> | <Float> ) <Ident> ( "[]" )* 
      ( "," ( <Int> | <Bool> | <String> | <Float> ) <Ident> ( "[]" )* )* )?
}

/* Declaração de retorno */
void ReturnStatement() : {} 
{
    <Return>
    ( sum() | LogicalSta() | <StringLiteralToken> )
    ";"
}

//
// Declarações locais em métodos
//
void LocalDeclaration() : {} 
{
    ( <Int> | <Bool> | <String> | <Float> )
    <Ident>
    LocalDeclarationRest()
}

void LocalDeclarationRest() : {} 
{
    ( "=" ( sum() | LogicalSta() | <StringLiteralToken> ) )? ";"
}

//
// Instruções (Statements)
//
void Statement() : {} 
{
    ( VarAssignOrInc() ";" 
    | LocalDeclaration()
    | IfExpression() 
    | ForExpression() 
    | WhileExpretion() )
}

//
// Estruturas de controle
//
void IfExpression() : {} 
{
    <If> "(" LogicalSta() ")" "{" ( Statement() )* "}"
    ( <Else> "{" ( Statement() )* "}" )?
}

void ForExpression() : {} 
{
    <For> "(" LocalDeclaration() 
    ( <Ident> <LogicalMathOperator> ( <Ident> | <CONSTANT> ) )? ";" 
    ( IncrementalExpression() )? ")" 
    "{" ( Statement() )* "}"
}

void WhileExpretion() : {} 
{
    <While> "(" LogicalSta() ")" "{" ( Statement() )* "}"
}

//
// Estrutura de classe
//
void ClassStruct() : {} 
{
    ( <AccessMod> )? <Class> <Ident>
    ( <Extends> <Ident> )?
    ( <Implements> <Ident> ( "," <Ident> )* )?
    "{"
        ( MemberDeclaration() )*
    "}"
    [ <EOF> ]
}
