/**
 * JavaCC template file created by SF JavaCC plugin 1.5.28+ wizard for JavaCC 1.5.0+
 */
options
{
  static = true;
}

PARSER_BEGIN(langJavaSh)
package cc;
public class langJavaSh
{
  public static void main(String args []) throws ParseException
  {
    langJavaSh parser = new langJavaSh(System.in);
    while (true)
    {
      System.out.println("Lendo a entrada padr\u00e3o");
      //      System.out.print("class Classe {\n\tint numero = 6; \n}\n");
      try
      {
        langJavaSh.ClassStruct();
        System.out.println("Compilado com sucesso");
      }
      catch (Exception e)
      {
        System.out.println("NOK.");
        System.out.println(e.getMessage());
        langJavaSh.ReInit(System.in);
      }
      catch (Error e)
      {
        System.out.println("Oops.");
        System.out.println(e.getMessage());
        break;
      }
    }
  }
}

PARSER_END(langJavaSh)

SKIP :
{
  " "
| "\r"
| "\t"
| "\n"
}

TOKEN : /* OPERATORS */
{
  < PLUS : "+" >
| < INCREMENT : "++" >
| < DECREMENT : "--" >
| < MINUS : "-" >
| < MULTIPLY : "*" >
| < DIVIDE : "/" >
| < MATH :
    (
      < PLUS >
    | < MINUS >
    | < MULTIPLY >
    | < DIVIDE >
    ) >
| < LogicalDigital :
    < And >
  | < Or > >
| < And :
    "&&"
  | "and" >
| < Or :
    "||"
  | "or" >
| < LogicalMathOperator :
    "=="
  | ">"
  | ">="
  | "<"
  | "<="
  | "!=" >
| < Atribute : "=" >
}

TOKEN :
{
  < CONSTANT : (< DIGIT >)+ >
| < LOGICALCONSTANT :
    "true"
  | "false" >
| < DIGIT : [ "0"-"9" ] >
| < AccessMod :
    "public"
  | "private"
  | "protected" >
| < Extends : "extends" >
| < Implements : "implements" >
| < Return : "return" >
}

// Palavras reservadas
TOKEN :
{
	  < While : "while" >
| 	< If : "if" >
| 	< Else : "else" >
| 	< For : "for" >
| 	< Do : "do" >
| < Int : "int" >
| < Float : "float" >
| < String : "string" >
| < Bool : "bool" >
| < Class : "class" >
}

TOKEN :
{
  < Ident : (< CHAR >)+ >
| < CHAR :
    (
      [ "a"-"z" ]
    | [ "A"-"Z" ]
    ) >
}

int one_line() :
{}
{
  sum()
  {
    return 0;
  }
|
  {
    return 1;
  }
}

void sum() :
{}
{
  term()
  (
    (
      < PLUS >
    | < MINUS >
    )
    term()
  )*
}

void term() :
{}
{
  unary()
  (
    (
      < MULTIPLY >
    | < DIVIDE >
    )
    unary()
  )*
}

void unary() :
{}
{
  < MINUS > element()
| element()
}

void element() :
{}
{
  < CONSTANT >
| "(" sum() ")"
}

void MathSta() :
{}
{
  (
    < Ident >
  | < CONSTANT >
  )
  (
    < MATH > MathSta()
  )?
}

void LogicalSta() :
{}
{
	  (
	    MathSta() < LogicalMathOperator > MathSta()
  )
	|
  (
    < LOGICALCONSTANT >
  | < Ident >
  )
	  (
    < LogicalDigital > LogicalSta()
  )?
}

void atributeVar(): { } {
	< Ident > "=" (MathSta() |LogicalSta() )

}

void initVar() :
{}
{
	  < Int > < Ident >
  (
    "=" MathSta()
  )?
| 	< Bool > < Ident >
  (
    "=" LogicalSta()
  )?
| 	< String > < Ident >
  (
    "=" "\"" (< CHAR >)* "\""
  )?
}

void Method() :
{}
{
	  (< AccessMod >)?
  (
    < Int >
  | < Float >
  | < String >
  | < Bool >
  )
  < Ident > "("
  (
    (
      < Int >
    | < Float >
    | < String >
    | < Bool >
    )
    < Ident > ("[]")*
  )*
  "){" code() "}"
}

void IfExpression() :
{}
{
	  < If > "(" LogicalSta()")" "{"
		  stra() 
	  "}"
  (
    < Else > "{" 
		    stra() 
	    "}"
  )?
}

void IncrementalExpression() :
{}
{
	  < Ident >
  (
    < DECREMENT >
  | < INCREMENT >
  )
|
	  (
    < DECREMENT >
  | < INCREMENT >
  )
  < Ident >
}

void ForExpression() :
{}
{
	  < For > "("initVar()";"(< Ident > <LogicalMathOperator > (< Ident > | < CONSTANT > ))?";"(IncrementalExpression())?")""{" 
		  (stra())?
	  "}"
}

void WhileExpretion() :
{}
{
	  < While > "(" LogicalSta()
  (
    "){"
  | ")" "{"
  )
		  (stra())? 
	  "}"
}

void prop() :
{}
{
	  (< AccessMod >)?
  (
    < Int >
  | < Float >
  | < String >
  | < Bool >
  )
  < Ident >
}

void ClassStruct() :
{}
{
  (< AccessMod >)? < Class > < Ident > (< Extends > < Ident >)?
  (
    < Implements > < Ident > ("," < Ident >)*
  )?
  "{"
  (
    Method()
  )*
  "}"
}

void stra() :
{}
{
    (atributeVar() |initVar()| IncrementalExpression()) ";"
  	| IfExpression()
	| ForExpression()
    | WhileExpretion()
}

void code() :
{}
{
  	(< Return > (< Ident >)? ";")
	|(stra())*
}
