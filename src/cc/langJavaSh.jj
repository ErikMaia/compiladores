/**
 * Versão transformada da gramática para LL(1)
 */
options
{
  static = true;
}

PARSER_BEGIN(langJavaSh)
package cc;
public class langJavaSh {
  public static void main(String args[]) throws ParseException, FileNotFoundException {
    if (args.length == 0) {
        System.out.println("Uso: java langJavaSh <arquivo>");
        System.exit(1);
    }

    // Abre o arquivo de entrada
    java.io.FileInputStream fileInputStream = new java.io.FileInputStream(args[0]);
    langJavaSh parser = new langJavaSh(fileInputStream);

    while (true) {
        System.out.println("Lendo o arquivo de entrada");
        try {
            parser.ClassStruct(); // Analisa a estrutura da classe
            System.out.println("Compilado com sucesso");
        } catch (Exception e) {
            System.out.println("NOK.");
            System.out.println(e.getMessage());
            parser.ReInit(fileInputStream); // Reinicializa o parser com o arquivo
        } catch (Error e) {
            System.out.println("Oops.");
            System.out.println(e.getMessage());
            break;
        }
    }
}
}
PARSER_END(langJavaSh)

SKIP :
{
  " " | "\r" | "\t" | "\n"
}

TOKEN : {
  < PLUS : "+" >
| < INCREMENT : "++" >
| < DECREMENT : "--" >
| < MINUS : "-" >
| < MULTIPLY : "*" >
| < DIVIDE : "/" >
| < MATH : ( <PLUS> | <MINUS> | <MULTIPLY> | <DIVIDE> ) >
| < LogicalDigital : ( <And> | <Or> ) >
| < And : "&&" | "and" >
| < Or : "||" | "or" >
| < LogicalMathOperator : "==" | ">" | ">=" | "<" | "<=" | "!=" >
| < Atribute : "=" >
}

TOKEN : {
  < CONSTANT : ( <DIGIT> )+ >
| < LOGICALCONSTANT : "true" | "false" >
| < DIGIT : ["0"-"9"] >
| < AccessMod : "public" | "private" | "protected" >
| < Extends : "extends" >
| < Implements : "implements" >
| < Return : "return" >
}

TOKEN : {
      < While : "while" >
|     < If : "if" >
|     < Else : "else" >
|     < For : "for" >
|     < Do : "do" >
|     < Int : "int" >
|     < Float : "float" >
|     < String : "string" >
|     < Bool : "bool" >
|     < Class : "class" >
}

TOKEN : {
  < Ident : ( <CHAR> )+ >
| < CHAR : ["a"-"z", "A"-"Z"] >
}

/* Produções da gramática */

/* Expressões aritméticas */
void sum() :
{ }
{
    term() ( ( <PLUS> | <MINUS> ) term() )*
}

void term() :
{ }
{
    unary() ( ( <MULTIPLY> | <DIVIDE> ) unary() )*
}

void unary() :
{ }
{
    <MINUS> element()
  | element()
}

void element() :
{ }
{
    <CONSTANT>
  | "(" sum() ")"
}

void MathSta() :
{ }
{
    ( <Ident> | <CONSTANT> ) ( <MATH> MathSta() )?
}

/* --- Transformação das expressões lógicas --- */
void LogicalSta() :
{ }
{
    BooleanExp()
}

void BooleanExp() :
{ }
{
    BooleanPrimary() BooleanExpTail()
}

void BooleanExpTail() :
{ }
{
    ( <LogicalDigital> BooleanExp() )?
}

void BooleanPrimary() :
{ }
{
    <LOGICALCONSTANT>
  | <CONSTANT> ( <MATH> MathSta() )?
  | <Ident> ( <LogicalMathOperator> MathSta() )?
}

/* --- Transformação de atribuição e incremento --- */
void VarAssignOrInc() :
{ }
{
    <Ident> VarAssignOrIncTail()
}

void VarAssignOrIncTail() :
{ }
{
    LOOKAHEAD(1) // Verifica o próximo token
    "=" ( MathSta() | LogicalSta() )
  | ( <DECREMENT> | <INCREMENT> )
}

void IncrementalExpression() :
{ }
{
    VarAssignOrInc()
  | ( <DECREMENT> | <INCREMENT> ) <Ident>
}

/* Usada também na escolha de statements */
void atributeVar() : {} {
    VarAssignOrInc()
}

/* Declaração de inicialização de variável */
void initVar() :
{ }
{
      <Int> <Ident> ( "=" MathSta() )?
  |   <Bool> <Ident> ( "=" LogicalSta() )?
  |   <String> <Ident> ( "=" "\"" ( <CHAR> )* "\"" )?
}

/* Declaração de método */
void Method() :
{ }
{
    ( <AccessMod> )?
    ( <Int> | <Float> | <String> | <Bool> )
    <Ident> "("
    ( ( <Int> | <Float> | <String> | <Bool> ) <Ident> ( "[]" )* )*
    ")"
    "{"
        (
          stra())*
    "}"
}

/* Expressão if */
void IfExpression() :
{ }
{
    <If> "(" LogicalSta() ")" "{" stra() "}"
    ( <Else> "{" stra() "}" )?
}

/* Expressão for */
void ForExpression() :
{ }
{
    <For> "(" initVar() ";" ( <Ident> <LogicalMathOperator> ( <Ident> | <CONSTANT> ) )? ";" ( IncrementalExpression() )? ")" "{"
         ( stra() )?
    "}"
}

/* Expressão while */
void WhileExpretion() :
{ }
{
    <While> "(" LogicalSta() ")" "{" ( stra() )? "}"
}

/* Declaração de propriedade */
void prop() :
{ }
{
    ( <AccessMod> )? ( <Int> | <Float> | <String> | <Bool> ) <Ident>
}

/* Estrutura de classe */
void ClassStruct() :
{ }
{
    ( <AccessMod> )? <Class> <Ident> ( <Extends> <Ident> )?
    ( <Implements> <Ident> ( "," <Ident> )* )?
    "{"
       ( Method() )*
    "}"
}

/* Statements (statement único ou composto) */
void stra() :
{ }
{
    ( 
        VarAssignOrInc() 
      | initVar() 
      | ( <DECREMENT> | <INCREMENT> ) <Ident> 
      | IfExpression() 
      | ForExpression() 
      | WhileExpretion()
    ) ";"
}


void panicSync() :
{ }
{
    LOOKAHEAD(1)
    (
        <Ident> | <CONSTANT> | ";" | "{" | "}"
    ) // Avança até um ponto seguro
}

